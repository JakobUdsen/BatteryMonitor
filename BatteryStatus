const int voltagePin = A0;      // Pin for voltage measurement
const int currentPin = A1;      // Pin for current measurement
const int batteryCapacity = 5000;  // Battery capacity in mAh
const int sampleInterval = 100;   // Sample interval in milliseconds
const int sampleCount = 10;      // Number of samples per interval

struct BatteryData {
  int voltage;
  int current;
  int remainingCapacity;
  int remainingTime;
};

BatteryData batteryData;
unsigned long previousMillis = 0;
const unsigned long interval = 1000;

int getCurrentSample() {
  int currentRaw = analogRead(currentPin);
  return map(currentRaw, 0, 1023, 0, 5000) / 1000 - 5;
}

void setup() {
  Serial.begin(9600);
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    int voltageRaw = analogRead(voltagePin);
    batteryData.voltage = map(voltageRaw, 0, 1023, 0, 5000) / 1000;
    int currentSum = 0;
    for (int i = 0; i < sampleCount; i++) {
      currentSum += getCurrentSample();
      delay(sampleInterval);
    }
    batteryData.current = currentSum / sampleCount;
    batteryData.remainingCapacity = batteryCapacity * (batteryData.voltage - 3.7) / (4.2 - 3.7);
    batteryData.remainingTime = batteryData.remainingCapacity / batteryData.current;
    Serial.print("Voltage: ");
    Serial.print(batteryData.voltage);
    Serial.print("V, Current: ");
    Serial.print(batteryData.current);
    Serial.print("A, Remaining Capacity: ");
    Serial.print(batteryData.remainingCapacity);
    Serial.print("mAh, Remaining Time: ");
    Serial.print(batteryData.remainingTime);
    Serial.println("h");
  }
}
